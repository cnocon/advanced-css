/** 1. Prefixing parent selector references **/
.dark-bg {
  background-color: $black;
  padding: 1rem;
  border-radius: $border-radius;
}

p {
  color: $black;
  margin-left: 1rem;
  margin-bottom: 3rem;

  .dark-bg & {
    color: $white;
    margin-bottom: 2rem;
  }
}

/** 2. Variable expansion in selectors **/
$alertClass: "error";

p.message--#{$alertClass} {
  color: rgba($color-danger, 1);
}

/** 3. Regex Selectors **/
p {
  &[class^="message"] {
    border-left: 10px solid $black;
    padding-left: 1.5rem;
  }

   &[class$="error"] {
    border-color: $color-danger;
  }

  &[class$="success"] {
    border-color: $color-success;
  }
}

/** Each **/
.button {
  padding: 1rem 2rem;
  border-radius: $border-radius;
  font-size: 2rem;
  margin-right: 3rem;
  text-transform: uppercase;
  font-weight: 800;
  color: $white;

  &:hover {
    cursor: pointer;
  }
}

$buttonConfig: (
  'save': $color-success,
  'cancel': $color-danger,
  'help': $light-blue
);

@each $type, $color in $buttonConfig {
  .button--#{$type} {
    background-color: $color;

    &:hover {
      background-color: lighten($color, 10%);
      color: darken($color, 20%);
    }
  }
}

[class^='center'] {
  width: 150px;
  height: 150px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  text-align: center;
  justify-content: center;
  border: 1px solid $onyx;

  p {
    font-size: 1.5rem !important;
    font-weight: 600 !important;
    text-align: center;
    align-self: center;
    margin-left: 0;
  }
}
// Define vertical, horizontal, or both position
@mixin absoluteCenter($position) {
  position: absolute;

  @if $position == 'vertical' {
    top: 50%;
    transform: translateY(-50%);
  }
  @else if $position == 'horizontal' {
    left: 50%;
    transform: translateX(-50%);
  }
  @else if $position == 'both' {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}
// Using the mixin
.parent {
  position: relative;
  height: 500px;
}

$colors: ('rose': $rose, 'yellow': $yellow, 'light-blue': $light-blue, 'aqua': $aqua);
@each $color in $colors {
  .bg-#{nth($color, 1)} {
    background-color: rgba(nth($color, 2), .35);
  }
}

.center-both {
  @include absoluteCenter(both);
}

.center-horizontal {
  @include absoluteCenter(horizontal);
}

.center-vertical {
  @include absoluteCenter(vertical);
}

%side-by-side-background {
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center;
}

.has-background-image {
  background-image: url('https://bit.ly/2PQ6GBs');
  @extend %side-by-side-background;
}

.has-background-image {
  min-height: 300px;

  p {
    padding: 3rem;
    width: 90%;
    margin: auto;
    transform: translate(0, 30%);
    background-color: rgba($white, .75);
  }

}

@function calculate-rem($size) {
  $rem-size: $size / 16px;
  @return #{$rem-size}rem;
}

@mixin font-size($size) {
  font-size: calculate-rem($size) !important;
}

h3 {
  @include font-size(120px);
}


.alert-wrapper {
  .alert {
    --theme: #ccc;
    --darkTheme: #777;
    --icon: '';
    background: var(--theme);
    border: 1px solid var(--darkTheme);
    /* other styles go here */

    &:before {
      background-image: var(--icon);
    }
  }

  .alert-success {
    --theme: #f0f9ef;
    --darkTheme: #7ebb7a;
    --icon: url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/14179/success.svg);
  }

  .alert-error {
    --theme: #fff5f5;
    --darkTheme: #f78b8b;
    --icon: url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/14179/error.svg);
  }

  .alert-warning {
    --theme: #fff9f0;
    --darkTheme: #ffc848;
    --icon: url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/14179/warning.svg);

    &::before {
      white-space: pre;
      font-family: monospace;
      content:\0031;

    }
  }
}

// SASS ELEMENTS TO QUALIFY A SELECTOR ======================
// https://css-tricks.com/snippets/sass/mixin-to-qualify-a-selector/
// ==========================================================

// Since the current way to qualify a class from within its ruleset is quite
// ugly, here is a mixin providing a friendly API to do so.
// @author Hugo Giraudel
// @param {String} $element-selector - Element selector
@mixin qualify($element-selector) {
  @at-root #{$element-selector + &} {
    @content;
  }
}

// assuming this is nested like 4 levels in, and is getting overridden like crazy, you can qualify it to remove it from the nest
.button {
  @include qualify(a) {
    contain: content;
    // Specific styles for `a.button`
  }
}




//====================================================
%post-skeletor{
  font:{ size: 12; weight: 700;}
  box-sizing: border-box;
  padding: 5px;
  margin: 10px;
  border: 1px solid whitesmoke;
}

.post-class {
  font:{ size: 12; weight: 700;}
  box-sizing: border-box;
  padding: 5px;
  margin: 10px;
  border: 1px solid whitesmoke;
}

.post1--extends__placeholder {
  @extend %post-skeletor;
  background: yellow;
}

.post1--extends_class{
  @extend .post-class;
  background: yellow;
}


//https://css-irl.info/7-uses-for-css-custom-properties/
:root {
  --noOfColumns: 8;
}

@media (min-width: 60em) {
  :root {
    --noOfColumns: 12;
  }
}

.grid {
  display: grid;
  grid-template-columns: repeat(var(--noOfColumns), 1fr);
}

// @mixin text($size, $lineHeight, $weight, $family, $color) {
//   font-family: $family;
//   font-size: $size;
//   line-height: $lineHeight;
//   font-weight: $weight;
//   color: $color;
// }

// p {
//   @include text(1rem, 1.5, 700, $montserrat, inherit)
// }
@mixin text($size, $lineHeight, $weight, $family) {
  /* If the $size argument is not empty, then output the argument */
  @if $size != null {
    font-size: $size;
  }

  // If the $lineHeight argument is not empty, then output the argument
  @if $lineHeight != null {
    line-height: $lineHeight;
  }

  // If the $weight argument is not empty, then output the argument
  @if $weight != null {
    font-weight: $weight;
  }

  // If the $family argument is not empty, then output the argument
  @if $family != null {
    font-family: $family;
  }
}

.text {
  @include text(1rem, 2.5, null, null)
}

// $weights: (
//   default: (thin: 300, normal: 400, bold: 600, black: 700, extrablack: 800),
//   display: (thin: 300, normal: 400, semibold: 500, bold: 600, black: 700, extrablack: 800),
//   mono: (normal: 400, black: 700),
//   default-italic: (thin: 300, normal: 400, bold: 600, black: 700, extrablack: 800),
//   display-italic: (normal: 400, semibold: 500, bold: 600, black: 700, extrablack: 800)
// );

// $site-fonts: (default: "'Open Sans', sans-serif", display: "'Montserrat', sans-serif", mono: "'Inconsolata', monospace");


// @each $type, $font in $site-fonts {
//   $w = map.get($weights, $type);
//   $i = map.get($weights, #{$type}-italic);

//   .font-#{$type} {
//     font-family: #{$font};
//     @each $pair, $weight in $w {
//       if
//       &-#{nth($pair, 1)} {
//         font-weight: nth($pair, 2);

//         @each $ipair, $iweight in $i {
//           &-#{nth($ipair, 1)} {
//             font-weight: nth($ipair, 2);
//           }
//         }
//       }
//     }
//   }
// }
